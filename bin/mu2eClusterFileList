#!/usr/bin/perl -w
#
# Print pathnames of a given set of files in mu2eprodsys output directory tree.
# This script is intended to be used on "checked" clusters to provide
# inputs to mu2eFileUpload and mu2eFileDeclare
#
# A.Gaponenko, 2016
#

use strict;
use English '-no_match_vars';
use Getopt::Long;
use File::Basename;

use Mu2eFilename;
use Mu2eDSName;

use lib dirname($0);
use Mu2eClusterDir;

my $dsname='';
my $json=0;
my %opt = ('dsname'=>\$dsname, 'json'=>\$json, help=>0 );

#================================================================
sub processJobDir {
    my ($jobdir) = @_;
    my @filelist = Mu2eClusterDir::getDirEntries($jobdir);

    foreach my $fn (@filelist) {
        next if $fn =~ /^\./;

        ## --json vs --nojson
        if($json) {
            next if $fn !~ s/\.json$//;
            my $pfn = Mu2eFilename->parse($fn);
            print "$jobdir/$fn.json\n" if($pfn->dataset->dsname eq $dsname);
        }
        else {
            next if $fn =~ /\.json$/;
            my $pfn = Mu2eFilename->parse($fn);
            print "$jobdir/$fn\n" if($pfn->dataset->dsname eq $dsname);
        }
    }
}

#================================================================
sub usage() {
    my $self = basename($0);
    return <<EOF
Usage:
        $self --dsname=<string> [--json] [--help] clusterdir1 [clusterdir2 ....]

This will print pathnames of files that belongs to the dataset named
in the --dsname parameter, or their json counterparts if --json is
used.  The files will be looked for in the directories listed on the
command line.  The script assumes the directory structure that is
produced by running mu2eprodsys jobs, and is intended to be used
on cluster directories in the "good" area.

Such listing of files can also be accomplished using the standard
"find" program.  However "find" needs to stat() filesystem entries,
which is expensive on /pnfs.  This script assumes a known directory
structure and can therefore avoid the stat() call.
EOF
;
}

#================================================================
# Process command line opts.
GetOptions(\%opt,
           "dsname=s",
           "json!",
           "help",
           )
    or die "\nError processing command line options.\n";

if($opt{'help'}) {
    print usage();
    exit 0;
}

die "Error: --dsname is required. Try the --help option.\n" unless $dsname ne '';

# Check that dsname is valid
Mu2eDSName->parse($dsname);

die "What job cluster(s) do you want to process? Try the --help option.\n" if ($#ARGV < 0);
foreach my $dir (@ARGV) {
    Mu2eClusterDir::iterate($dir, \&processJobDir);
}

exit 0;

#================================================================
