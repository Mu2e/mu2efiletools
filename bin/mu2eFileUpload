#!/usr/bin/perl -w
#
# Moves given files to their standard location.
#
# A.Gaponenko, 2015, 2016
#

use strict;
use File::Basename;
use File::Path qw(make_path);
use File::stat;
use Getopt::Long;
use Digest;
use Time::HiRes qw(gettimeofday tv_interval);
use Cwd 'abs_path';

use Mu2eFilename;

use lib dirname($0);
use Mu2eUtils;

use constant TAPE => 'tape';
use constant DISK => 'disk';
use constant SCRATCH => 'scratch';

my $dstarea; # tape, disk, or scratch
my $forcecopy = 0;
my $use_ifdh = 0;
my $verbosity=1;
my $dryrun=0;
my %opt = ( copy=>\$forcecopy, ifdh=>\$use_ifdh, verbosity=>\$verbosity, 'dry-run'=>\$dryrun, help=>0 );

# stat counters for the processing
my $numCopied = 0;
my $numMoved = 0;

my $totalCopiedBytes = 0;
my $totalCopyTime = 0;

#================================================================
sub needToCopy($) {
    my ($infile) = @_;
    return 1 if $forcecopy;
    return 1 if $dstarea eq TAPE();

    my $absin = abs_path($infile);
    return 0 if $dstarea eq DISK() and $absin =~ m|^/pnfs/mu2e/persistent|;
    return 0 if $dstarea eq SCRATCH() and $absin =~ m|^/pnfs/mu2e/scratch|;

    return 1;
}

#================================================================
sub processFile($) {
    my ($infile) = @_;
    my $fn = Mu2eFilename->parse(basename($infile));

    my $stdpath;
    $stdpath = $fn->abspathname_tape if($dstarea eq TAPE());
    $stdpath = $fn->abspathname_disk if($dstarea eq DISK());
    $stdpath = $fn->abspathname_scratch if($dstarea eq SCRATCH());
    die "Internal error: unknown dstarea\n" unless defined $stdpath;

    if(-e $stdpath) {
        die "Request to upload $infile, but $stdpath already exists.\n";
    }
    else {

        my $dirpath = dirname($stdpath);
        if(!$dryrun) {
            make_path($dirpath);
            -d $dirpath or die "Error creating dir path $dirpath: $! on ".localtime()."\n";
        }
        my $now_string = localtime();

        my $copy = needToCopy($infile);
        if($copy)  {
            my $st = stat($infile) or die "Error stating $infile: $! on ".localtime()."\n";

            print +($numCopied+$numMoved) , ($dryrun ? "  Would start" : "  Starting"),
            " to transfer ", $st->size, " bytes in $infile to $stdpath on $now_string\n"
                if $verbosity > 0;

            if(!$dryrun) {

                # Use high precision time to measure the data transfer
                # rate.  Note that the checked_copy() call does more
                # than just copy the bytes; it also retrieves and
                # verifies dCache checksums. Therefore the rate
                # measurement here is biased, because we attribute all
                # of the elapsed time to the data copy.

                my $t1 = [gettimeofday()];

                if($use_ifdh) {
                    Mu2eUtils::ifdh_copy($infile, $stdpath);
                }
                else {
                    Mu2eUtils::checked_copy($infile, $stdpath);
                }

                my $elapsed = tv_interval($t1);

                if(($verbosity > 0) && ($elapsed > 0.1)) {
                    my $datarate = $st->size/1024./1024./$elapsed;
                    print "\t$datarate MiB/s\n";
                }

                $totalCopiedBytes += $st->size;
                $totalCopyTime += $elapsed;

                if(!$dryrun and !$forcecopy) {
                    unlink $infile
                        or die "Error deleting $infile: $!\n";
                }
            }

            ++$numCopied;
        }
        else {
            print +($numCopied+$numMoved), ($dryrun ? " Would move" : " Moving"), " $infile to $stdpath on $now_string\n"
                if $verbosity > 0;

            if(!$dryrun) {
                rename($infile, $stdpath) or die "Error in rename($infile, $stdpath): $! on ".localtime()."\n";
            }
            ++$numMoved;
        }
    }
}
#================================================================
sub pretty_print_bytes($) {
    my ($size) = @_;
    foreach ('B','KiB','MiB','GiB','TiB') {
        return sprintf("%.2f",$size)." $_" if $size < 1024;
        $size /= 1024;
    }
    return sprintf("%.2f",$size)."PiB";
}

#================================================================
sub usage() {
    my $self = basename($0);
    return <<EOF
Usage:
        $self {--tape|--disk|--scratch} [options]

Will read file names on stdin and try to move each file to its
standard location.

One of the --tape, --disk, or --scratch choices
must be made.  A report on the number of skipped and copied files is
printed at the end.

The supported options are

    --copy                Always copy the files and leave originals in place.
                          By default the script will move files to the destination
                          by either renaming (if possible), or copying and deleting
                          the original.  The --copy option forces to alway
                          copy the files and leave the originals in place.

    --ifdh                Use 'ifdh cp' to copy files, if a copy is needed.

                          By default data are copied using normal filesystem
                          read/write calls (means using the NFS protocol of
                          dCache).  A checksum of the bytes written to dCache is
                          computed on-the-fly, and compared to dCache-computed
                          checksum after the copy is complete.  We have seen
                          this check catching data corruption in several cases.
                          This check detects data corruption before the original
                          file is deleted, and stops the process, giving the user
                          an option to clean up and re-try the upload.

                          With the --ifdh option this check is not performed, as
                          the actual copy is delegated to the external command.
                          In case of data corruption on write, the file will be
                          lost.  It is the user\'s responsibility to make sure
                          that the ifdh command is set up and available in PATH,
                          and that it has appropriate authentication
                          proxies/tokens available.

    --verbosity=<int>     Verbosity level.  The default is 1.

    --dry-run             Do not copy the files, just count and report.

    --help                Print this message.

EOF
;
}

#================================================================
# Process command line opts.
GetOptions(\%opt,
           "tape",
           "disk",
           "scratch",
           "copy",
           "ifdh",
           "verbosity=i",
           "dry-run",
           "help",
           )
    or die "\nError processing command line options.\n";

if($opt{'help'}) {
    print usage();
    exit 0;
}

die "ERROR: Got non-option command line parameters.  Try the --help option.\n"
    unless $#ARGV ==  -1;


if(defined $opt{'tape'}) {
    die "Error: conflicting options --tape and --$dstarea\n" if defined $dstarea;
    $dstarea = TAPE();
}
if(defined $opt{'disk'}) {
    die "Error: conflicting options --disk and --$dstarea\n" if defined $dstarea;
    $dstarea = DISK();
}
if(defined $opt{'scratch'}) {
    die "Error: conflicting options --scratch and --$dstarea\n" if defined $dstarea;
    $dstarea = SCRATCH();
}
die "Error: one of --tape, --disk, or --scratch must be requested\n" unless defined $dstarea;

my $tScriptStart = [gettimeofday()];
while(my $line = <STDIN>) {
    chomp($line);
    processFile($line);
}
my $totalElapsed = tv_interval($tScriptStart);

my $alg = $use_ifdh ? "(with ifdh)" : "";
print "Summary: copied $alg $numCopied and moved $numMoved files in $totalElapsed seconds.\n";
if($totalCopyTime > 0.1) {
    my $sz = pretty_print_bytes($totalCopiedBytes);
    my $throughput = sprintf "%.2f MiB/s", $totalCopiedBytes/1024./1024./$totalCopyTime;
    print "The average throughput was $sz in $totalCopyTime s = $throughput\n";
}

exit 0;

#================================================================
