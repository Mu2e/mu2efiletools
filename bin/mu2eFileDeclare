#!/usr/bin/perl -w
#
# Declares Mu2e files to SAM, from JSON inputs.
#
# A.Gaponenko, 2015
#

use strict;
use English '-no_match_vars';
use Getopt::Long;
use LWP::UserAgent;
use File::Basename;
use Time::HiRes qw(gettimeofday tv_interval);
use Data::Dumper;

use lib dirname($0);
use Mu2eSWI;

my $delete_json = 1;
my $verbosity=1;
my $sw = Mu2eSWI->new;

my %opt = ('delete-json'=>\$delete_json,
           verbosity=>\$verbosity,
           help=>0,
           %{$sw->optDefaults},
    );

my $totalFiles= 0;
my $totalServerTime = 0;

#================================================================
sub processFile($$) {
    my ($sw, $jsname) = @_;
    print "Processing file $jsname\n" if $verbosity > 1;
    die "Error: expect .json files on input. Got: \"$jsname\" on ".localtime()."\n"
        unless $jsname =~ /\.json$/;

    my $FH;
    open(FH, "<", $jsname) or die "Can not open $jsname: $! on ".localtime()."\n";
    my $jstext;
    while(my $line = <FH>) {
        $jstext .= $line;
    }
    close FH;

    # Create a request
    my $req = HTTP::Request->new(POST => $sw->write_server . '/sam/mu2e/api/files');
    $req->content_type('application/json');
    $req->content($jstext);

    my $numtries = 0;
    my $delay = $sw->delay;
    my $done = 0;
    while(not $done) {

        ++$numtries;

        # Measure the timing
        my $t1 = [gettimeofday()];

        # Pass request to the user agent and get a response back
        my $res = $sw->ua->request($req);

        my $elapsed = tv_interval($t1);
        $totalServerTime += $elapsed;

        my $now_string = localtime();

        # Check the outcome of the response
        if ($res->is_success) {
            print "Dump of the server response:\n" , Dumper($res), "\n" if $verbosity > 1;
            if($delete_json) {
                unlink $jsname or die "Error deleting file $jsname: $! on ".localtime()."\n";
                print "Deleted $jsname\n" if $verbosity > 1;
            }
            $done = 1;
            ++$totalFiles;
            print "Successfully processed file $totalFiles  $jsname on $now_string\n" if $verbosity > 0;
        }
        else {
            print STDERR "Got ",$res->status_line," on $now_string, processing file $jsname\n" if $verbosity > 0;
            print STDERR "Dump of the server response:\n", Dumper($res), "\n" if $verbosity > 1;

            if(409 == $res->code) {
                die "Error: conflict with a previously declared file. Stop.\n";
            }

            if($numtries >= $sw->maxtries) {
                die "Error: $numtries tries failed. Stopping on $now_string due to: ",
                $res->status_line, ".\n", $res->content,"\n";
            }
            else {
                print STDERR "Will retry in $delay seconds\n" if $verbosity > 0;
                sleep $delay;
                $delay += int(rand($delay));
            }
        }
    }

}

#================================================================
sub usage() {
    my $self = basename($0);
    return <<EOF
Usage:
        $self [options]

Reads names of json files from STDIN, and uses their content to
declare Mu2e file to SAM.  If a file was declared successfully,
the json input file is deleted. The supported options are

        --nodelete-json       Do not delete json files.

EOF
. $sw->optDocString(' 'x8,' 'x5) .
<<EOF

        --verbosity=<int>     Verbosity level.  The default is 1.

        --help                Print this message.

Before using this script, run kx509 to generate authentication files
to connect to the server.  Or set environment variables
HTTPS_CERT_FILE and HTTPS_KEY_FILE to point to the appropriate files.

EOF
;
}

#================================================================
# Process command line opts.
GetOptions(\%opt,
           "delete-json!",
           "verbosity=i",
           "help",
           @{$sw->optSpec},
    )
    or die "\nError processing command line options.\n";

if($opt{'help'}) {
    print usage();
    exit 0;
}

die "ERROR: Got non-option command line parameters.  Try the --help option.\n"
    unless $#ARGV ==  -1;


sub checkAuthFile {
    for my $name (@_) {
        if(defined $ENV{$name}) {
            die "Error: the file $ENV{$name} specified  by environment variable $name is not readable.\n"
                unless -r $ENV{$name};
        }
        else {
            $ENV{$name} = '/tmp/x509up_u'.$EUID;
            die "Error: the file $ENV{$name} is not readable. Run kx509?\n"
                unless -r $ENV{$name};
        }
    }
}

checkAuthFile('HTTPS_CERT_FILE', 'HTTPS_KEY_FILE');

while(my $line = <STDIN>) {
    chomp($line);
    processFile($sw, $line);

}

print "Summary: processed $totalFiles files. Total time spent in communicating with the samweb server is $totalServerTime seconds.\n";

exit 0;

#================================================================
