#!/usr/bin/perl -w
#
# Verifies the checksum of a file.
#
# A.Gaponenko, 2015, 2016
#

use strict;

use English '-no_match_vars';
use Getopt::Long;
use LWP::UserAgent;
use HTTP::Request::Common;
use JSON;
use File::Basename;
use File::stat;
use Cwd 'abs_path';
use Time::HiRes qw(gettimeofday tv_interval);
use Digest;
use Mu2eFilename;
use Data::Dumper;

use lib dirname($0);
use Mu2eSWI;
use Mu2eUtils;

my $add_target='';
my $dryrun = 0;
my $force_verify = 0;
my $verbosity=3;
my $sw = Mu2eSWI->new;

my %opt = ( 'add'=>\$add_target,
            'dry-run'=>\$dryrun,
            'force-verify'=>\$force_verify,
            verbosity=>\$verbosity,
            help=>0,
            %{$sw->optDefaults},
    );

# stat counters for the processing
my $numTotalFiles = 0;
my $numNoFile = 0;
my $numNoTape = 0;
my $numBad = 0;
my $numGood = 0;
my $numAddedLocation = 0;

my $totalMetadataQueryTime = 0.;
my $totalLocationUpdateTime = 0.;

#================================================================
sub sha256ok($) {
    my ($pathname) = @_;

    my $samsha = $sw->getSamSha(basename($pathname), {metadataQueryTime=>\$totalMetadataQueryTime});

    return Mu2eUtils::hexdigest($pathname) eq $samsha;
}

#================================================================
sub processFile($$) {
    my ($sw, $pathname) = @_;

    ++$numTotalFiles;

    if(not -e $pathname) {
        ++$numNoFile;
        print "$numTotalFiles\tNOFILE: $pathname on ",scalar(localtime()),"\n";
        return;
    }

    my $passed = 0;
    my $tapeinfo;

    if(Mu2eUtils::tapeBacked($pathname)) {
        $tapeinfo = Mu2eUtils::getEnstoreInfo($pathname);
        if(not defined $tapeinfo) {
            if(!$force_verify or sha256ok($pathname)) {
                ++$numNoTape;
                print "$numTotalFiles\tNO_TAPE_LABEL: $pathname on ",scalar(localtime()),"\n";
                return;
            }
            else {
                ++$numBad;
                print "$numTotalFiles\tBADHASH: $pathname on ",scalar(localtime()),"\n";
                return;
            }
        }
        else {
            print "Got enstore info: tape = ",$tapeinfo->label,
            ", cookie = ",$tapeinfo->location_cookie,"\n"
                if $verbosity > 8;
        }
    }

    if(not sha256ok($pathname)) {
        ++$numBad;
        print "$numTotalFiles\tBADHASH: $pathname on ",scalar(localtime()),"\n";
        return;
    }

    my $location = Mu2eUtils::makeSamLocation($pathname, $tapeinfo);
    $numAddedLocation +=
        $sw->maybeAddLocationToSam(basename($pathname), $location,
                                   {dryrun=>$dryrun, verbosity=>$verbosity,
                                    serverUpdateTime=>\$totalLocationUpdateTime} );

    ++$numGood;
    print "$numTotalFiles\tOK: $pathname on ",scalar(localtime()),"\n" if $verbosity > 1;
}

#================================================================
sub processDataset {
    my $dsname = shift;

    # make sure cmdline parameters make sense
    Mu2eDSName->parse($dsname);

    my @fl = $sw->listFiles("dh.dataset=$dsname with availability virtual");

    if(scalar(@fl) > 0) {
        print "Will check ",scalar(@fl)," files for dataset $dsname on ",
        scalar(localtime()),".\n";

        for my $file (@fl) {
            my $fn = Mu2eFilename->parse($file);
            my $pathname = $fn->abspathname($add_target);
            processFile($sw, $pathname);
        }
    }
    else {
        print "No virtual files in dataset $dsname. Nothing to do on ",
        scalar(localtime()),".\n";
    }
}

#================================================================
sub usage() {
    my $self = basename($0);
    my $dstopts = join('|', Mu2eFNBase::standard_locations());
    return <<EOF
Usage:
        $self [options] --add={$dstopts} <DatasetName>

This command operates on a subset of SAM records in the given dataset
that do not have their location defined.  If the standard Mu2e tape
(or disk, or scratch) directory contains a corresponding physical file,
and the checksum of the file agrees with the SAM record, the location
is added to SAM.   Files in the tape-backed storage must have their
tape labels known, otherwise they are skipped.   This command
can be run multiple times on the same dataset.

Options:
EOF
. $sw->optDocString(' 'x4, ' 'x7) .
<<EOF

    --dry-run               Go through the moves, but do not write to the database.

    --force-verify          Do not skip files without tape labels when checking sha256sum.

    --verbosity=<int>       Verbosity level. The default is $verbosity.
                            1 print a line per file that failed verification
                            2 printouts for OK and failed, but not skipped files
                            3 also print a  'starting' message before attempting
                              FS operations that can hang
                            4 add printouts for skipped files
                            9 debug

    --help                  Print this message.

EOF
;
}

# Process command line opts.
GetOptions(\%opt,
           "add=s",
           "verbosity=i",
           "dry-run",
           "force-verify",
           "help",
           @{$sw->optSpec},
           )
    or die "\nError processing command line options.\n";

if($opt{'help'}) {
    print usage();
    exit 0;
}

die "ERROR: At least one dataset name must be specified.  Try the --help option.\n"
    unless $#ARGV >=  0;

die "ERROR: --add parameter must be specified\n" if($add_target eq '');
my $known = 0;
foreach my $loc (Mu2eFNBase::standard_locations()) {
    $known = 1 if $loc eq $add_target;
}
die "Unknown dataset location '$add_target'\n" unless $known;

$sw->authConfig();

foreach my $ds (@ARGV) {
    processDataset($ds);
}

printf "SAMWeb times: query metadata = %.2f s, update location = %.2f s\n",
    $totalMetadataQueryTime, $totalLocationUpdateTime;

print "Summary1: out of $numTotalFiles virtual dataset files $numNoFile were not found on $add_target.\n";
print "Summary2: successfully verified $numGood files, added locations for $numAddedLocation files.\n";
print "Summary3: found $numBad corrupted files and $numNoTape files without tape labels.\n";

exit 0;

#================================================================
