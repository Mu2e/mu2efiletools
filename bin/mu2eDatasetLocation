#!/usr/bin/perl -w
#
# Verifies the checksum of a file.
#
# A.Gaponenko, 2015, 2016
#

use strict;

use English '-no_match_vars';
use Getopt::Long;
use LWP::UserAgent;
use HTTP::Request::Common;
use JSON;
use File::Basename;
use File::stat;
use Cwd 'abs_path';
use Time::HiRes qw(gettimeofday tv_interval);
use Digest;
use Mu2eFilename;
use Data::Dumper;

use lib dirname($0);
use Mu2eSWI;

use Class::Struct Mu2eEnstoreInfo => [label=>'$', location_cookie=>'$'];

my $add_target='';
my $dryrun = 0;
my $verbosity=3;
my $sw = Mu2eSWI->new;

my %opt = ( 'add'=>\$add_target,
            'dry-run'=>\$dryrun,
            verbosity=>\$verbosity,
            help=>0,
            %{$sw->optDefaults},
    );

# stat counters for the processing
my $numTotalFiles = 0;
my $numNoFile = 0;
my $numNoTape = 0;
my $numBad = 0;
my $numGood = 0;
my $numAddedLocation = 0;

my $totalReadBytes = 0;
my $totalSHATime = 0;

my $totalMetadataQueryTime = 0.;
my $totalLocationQueryTime = 0.;
my $totalLocationUpdateTime = 0.;

#================================================================
sub tapeBacked($) {
    return $add_target =~ /tape/;
}

#================================================================
sub queryBFID($) {
    my ($bfid) = @_;

    my $file_info = `enstore info --bfid $bfid`;
    die "Error from enstore info for BFID $bfid\n" unless defined $file_info;

    $file_info =~ m/'external_label'\s*:\s*'(.+)'/
        or die "Error parsing file info: can't extract external_label from:\n$file_info\n";
    my $label = $1;

    $file_info =~ m/'location_cookie'\s*:\s*'(.+)'/
        or die "Error parsing file info: can't extract location_cookie from:\n$file_info\n";
    my $cookie = $1;

    return ( Mu2eEnstoreInfo->new(label=>$label, location_cookie=> $cookie), $file_info );
}

sub filterLocationCookie($) {
    my ($fi) = @_;
    my $cookie = $fi->location_cookie;
    $cookie =~ s/_//g;
    $cookie =~ m/^\d+$/ or die "Unexpected format of location_cookie='",
    $fi->cookie,"' for a non-SFA file.";
    return Mu2eEnstoreInfo->new(label=>$fi->label, location_cookie=> 0 + $cookie);
}

my $enstore_checked = 0;
sub getEnstoreInfo($) {
    my ($pathname) = @_;

    if(not $enstore_checked) {
        my $out = `enstore -h`;
        die "Error running 'enstore' command\n" unless defined $out;
        $enstore_checked = 1;
    }

    my $file_bfid = `enstore pnfs --bfid $pathname 2>/dev/null`;
    if($? ne 0) {
        return undef; # the file is not on tape yet.
    }
    chomp $file_bfid;

    my ($fi, $file_info) = queryBFID($file_bfid);

    # Check for SFA.  Per cs-doc-4698v4 "Enstore Small File Aggregation User Guide"
    # external_label for a package member will contain ':'
    if($fi->label =~ /:/) {

        if($file_info =~ m/'package_id'\s*:\s*None/i) {
            return undef; # not packaged yet
        }

        $file_info =~ m/'package_id'\s*:\s*'(.+)'/
            or die "Error parsing file info: can't extract package_id from:\n$file_info\n";

        my $package_bfid = $1;

        my ($pkg, $pkg_info) = queryBFID($package_bfid);

        return filterLocationCookie($pkg);
    }

    return filterLocationCookie($fi);
}

#================================================================
sub hexdigest($) {
    my ($pathname) = @_;

    my $t1hash = [gettimeofday()];

    # compute sha256 for the file
    my $dig = Digest->new('SHA-256');
    open(my $fh, '<', $pathname) or die "Error opening $pathname for reading: $! on ".localtime()."\n";
    $dig->addfile($fh);
    close $fh;

    $totalSHATime += tv_interval($t1hash);

    my $st = stat($pathname) or die "Error stating $pathname: $! on ".localtime()."\n";
    $totalReadBytes += $st->size;

    return $dig->hexdigest;
}

#================================================================
sub makeSamLocation($$) {
    my ($pathname, $tapeinfo) = @_;
    my $dir = dirname($pathname);

    if(tapeBacked($pathname)) {
        return 'enstore:'.$dir.'('.$tapeinfo->location_cookie.'@'.$tapeinfo->label.')';
    }
    else {
        return "dcache:".$dir   if $dir =~ m|^/pnfs/mu2e/persistent|;
        return "dcache:".$dir   if $dir =~ m|^/pnfs/mu2e/scratch|;
        die "Error: makeSamLocation('$pathname'): unknown file location.\n";
    }
}

#================================================================
sub maybeAddLocationToSam($$$) {
    my ($sw, $pathname, $tapeinfo) = @_;
    my $fn = basename($pathname);

    my $location = makeSamLocation($pathname, $tapeinfo);

    # Note: the documentation at
    # https://cdcvs.fnal.gov/redmine/projects/sam-web/wiki/Interface_definitions
    # specifies HTTP PUT for adding a location. However it seems we should use POST instead.

    print +($dryrun ? "Would add" : "Adding" ). " to SAM location = $location\n" if $verbosity > 8;
    if(not $dryrun) {

        my $numtries = 0;
        my $delay = $sw->delay;
        while(1) {
            ++$numtries;

            my $t1 = [gettimeofday()];
            my $res = $sw->ua->request(
                POST $sw->write_server.'/sam/mu2e/api/files/name/'.$fn.'/locations',
                Content => {'add' => $location }
                );

            $totalLocationUpdateTime += tv_interval($t1);

            if ($res->is_success) {
                print "Added location $pathname to SAM. Server response:\n", Dumper($res), "\n" if $verbosity > 8;
                ++$numAddedLocation;
                return;
            }
            else {
                print STDERR "Error adding location $pathname for for file $fn: ",$res->status_line," on ".localtime()."\n" if $verbosity > 0;
                print STDERR "Dump of the server response:\n", Dumper($res), "\n" if $verbosity > 8;

                if($numtries >= $sw->maxtries) {
                    die "Error: $numtries tries failed. Stopping on ".localtime()." due to: ",
                    $res->status_line, ".\n", $res->content,"\n";
                }
                else {
                    print STDERR "Will retry in $delay seconds\n" if $verbosity > 0;
                    sleep $delay;
                    $delay += int(rand($delay));
                }
            }

        } # retry loop
    } # not(dryrun)
}

#================================================================
sub processFile($$) {
    my ($sw, $pathname) = @_;

    ++$numTotalFiles;

    if(not -e $pathname) {
        ++$numNoFile;
        print "$numTotalFiles\tNOFILE: $pathname on ",scalar(localtime()),"\n";
        return;
    }

    my $passed = 0;
    my $tapeinfo;

    if(tapeBacked($pathname)) {
        $tapeinfo = getEnstoreInfo($pathname);
        if(not defined $tapeinfo) {
            ++$numNoTape;
            print "$numTotalFiles\tNO_TAPE_LABEL: $pathname on ",scalar(localtime()),"\n";
            return;
        }
        else {
            print "Got enstore info: tape = ",$tapeinfo->label,
            ", cookie = ",$tapeinfo->location_cookie,"\n"
                if $verbosity > 8;
        }
    }

    my $samsha = $sw->getSamSha(basename($pathname), {metadataQueryTime=>\$totalMetadataQueryTime});

    if(hexdigest($pathname) ne $samsha) {
        ++$numBad;
        print "$numTotalFiles\tBADHASH: $numTotalFiles $pathname on ",scalar(localtime()),"\n";
        return;
    }

    maybeAddLocationToSam($sw, $pathname, $tapeinfo);

    ++$numGood;
    print "$numTotalFiles\tOK: $pathname on ",scalar(localtime()),"\n" if $verbosity > 1;
}

#================================================================
sub processDataset {
    my $dsname = shift;

    # make sure cmdline parameters make sense
    Mu2eDSName->parse($dsname);

    my @fl = $sw->listFiles("dh.dataset=$dsname with availability virtual");

    if(scalar(@fl) > 0) {
        print "Will check ",scalar(@fl)," files for dataset $dsname on ",
        scalar(localtime()),".\n";

        for my $file (@fl) {
            my $fn = Mu2eFilename->parse($file);
            my $pathname = $fn->abspathname($add_target);
            processFile($sw, $pathname);
        }
    }
    else {
        print "No virtual files in dataset $dsname. Nothing to do on ",
        scalar(localtime()),".\n";
    }
}

#================================================================
sub usage() {
    my $self = basename($0);
    my $dstopts = join('|', Mu2eFNBase::standard_locations());
    return <<EOF
Usage:
        $self [options] --add={$dstopts} <DatasetName>

This command operates on a subset of SAM records in the given dataset
that do not have their location defined.  If the standard Mu2e tape
(or disk, or scratch) directory contains a corresponding physical file,
and the checksum of the file agrees with the SAM record, the location
is added to SAM.   Files in the tape-backed storage must have their
tape labels known, otherwise they are skipped.   This command
can be run multiple times on the same dataset.

Options:
EOF
. $sw->optDocString(' 'x4, ' 'x7) .
<<EOF

    --dry-run               Go through the moves, but do not write to the database.

    --verbosity=<int>       Verbosity level. The default is $verbosity.
                            1 print a line per file that failed verification
                            2 printouts for OK and failed, but not skipped files
                            3 also print a  'starting' message before attempting
                              FS operations that can hang
                            4 add printouts for skipped files
                            9 debug

    --help                  Print this message.

EOF
;
}

# Process command line opts.
GetOptions(\%opt,
           "add=s",
           "verbosity=i",
           "dry-run",
           "help",
           @{$sw->optSpec},
           )
    or die "\nError processing command line options.\n";

if($opt{'help'}) {
    print usage();
    exit 0;
}

die "ERROR: At least one dataset name must be specified.  Try the --help option.\n"
    unless $#ARGV >=  0;

die "ERROR: --add parameter must be specified\n" if($add_target eq '');
my $known = 0;
foreach my $loc (Mu2eFNBase::standard_locations()) {
    $known = 1 if $loc eq $add_target;
}
die "Unknown dataset location '$add_target'\n" unless $known;

$sw->authConfig();

foreach my $ds (@ARGV) {
    processDataset($ds);
}

printf "Computed SHA-256 on %.3f GB in %.2f s\n", $totalReadBytes/1024/1024/1024,  $totalSHATime;
printf "SAMWeb times: query metadata = %.2f s,  query location = %.2f s, update location = %.2f s\n",
    $totalMetadataQueryTime, $totalLocationQueryTime, $totalLocationUpdateTime;

print "Summary1: out of $numTotalFiles virtual dataset files $numNoFile were not found on $add_target.\n";
print "Summary2: successfully verified $numGood files, added locations for $numAddedLocation files.\n";
print "Summary3: found $numBad corrupted files and $numNoTape files without tape labels.\n";

exit 0;

#================================================================
